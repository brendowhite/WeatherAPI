import tkinter as tk
import time
from tkinter import messagebox
import requests
from weatherFetch import fetchWeatherData, fetchWeatherPeriodically, updateBACnetValues, setAltitude
import threading


########################### GUI FUNCTIONALITY ################################

# function to collect user inputs from the form once "start" is pressed
def submit_form():
    try:
        lat = float(latitude_entry.get())
        lon = float(longitude_entry.get())
        inputAlt = float(altitude_entry.get())
        api_token = api_key_entry.get()
        device_Id = int(device_entry.get())
        port_Id = port_entry.get()

        if not validate_lat(lat):
            messagebox.showerror("Error", "Invalid latitude, please enter a value between -90 and 90 degrees.")
            return
        
        if not validate_lon(lon):
            messagebox.showerror("Error", "Invalid longitude, please enter a value between -180 and 180 degrees.")
            return
        # Check if all fields are filled
        if not (lat and lon and inputAlt and api_token and device_Id and port_Id):
            messagebox.showerror("Error", "Please fill in all fields before submitting.")
            return

        # Check if the API key is valid (you can replace this with your own validation logic)
        if not validateAPIToken(api_token):
            messagebox.showerror("Error", "Invalid API key. Please check your token.")
            return
        
        if not validDeviceId(device_Id):
            messagebox.showerror("Error", "Please enter a device ID between 0 and 4194302")
            return

        setAltitude(inputAlt)
        # Pass the values to backend functions
        fetchWeatherData(lat, lon, api_token)

        # Create a thread for periodic weather fetching
        weather_thread = threading.Thread(target=fetchWeatherPeriodically, args=(lat, lon, api_token))
        weather_thread.start()

        # Start BACnet devices and update their values
        BACnetThread = threading.Thread(target=updateBACnetValues, args= (device_Id, port_Id))
        BACnetThread.start()


        # Print the values
        print("Valid latitude and longitude values:")
        print(f"Latitude: {lat}")
        print(f"Longitude: {lon}")
        print(f"Altitude: {inputAlt}")
        print(f"Weather API Key: {api_token}")
        # print(f"BACnet Device ID: {virtual_device}")

    except ValueError:
        messagebox.showerror("Error", "Invalid input! Please enter valid numeric values for latitude, longitude, and altitude.")
        # Reset lat and lon to None
        lat = None
        lon = None


# function to validate longitude input
def validate_lon(lon):
    return -180 <= lon <= 180

# function to validate latitude input
def validate_lat(lat):
    return -90 <= lat <= 90

# function to validate weather API token input
def validateAPIToken(WEATHER_API_TOKEN):
    try:
        # dummy request to confirm validity
        url = f"http://api.openweathermap.org/data/2.5/weather?q=London&appid={WEATHER_API_TOKEN}"
        response = requests.get(url)

        if response.status_code == 200:
            print("API key is valid.")
            return True
        else:
            print("API key is invalid.")
            return False
    except requests.RequestException:
        print("Error occurred while checking the API key.")
        return False    

# check that ensures that device id does not exceed bacnet protocol limit
def validDeviceId(device_Id):
    return 0 <= device_Id <= 4194302

# creates clock with live time widget
def update_time():
    current_time = time.strftime('Current Time: %H:%M:%S')
    clock_label.config(text=current_time)
    clock_label.after(1000,update_time)



######################################### GUI START #########################################

class Page(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
    def show(self):
        self.lift()

class Page1(Page):
    def __init__(self, *args, **kwargs):
        Page.__init__(self, *args, **kwargs)
        label = tk.Label(self, text="DEVICE AND API CONFIGURATION", font=("segoe", 12, "bold"))
        label.grid(row=0, column=0, columnspan=4, sticky="w", pady=(10,0))

        #global vars
        global latitude_entry
        global longitude_entry
        global api_key_entry
        global altitude_entry
        global port_entry
        global device_entry
        # Row 1 Widgets
        latitude_label = tk.Label(self, text="Latitude (-90 <-> +90):")
        latitude_entry = tk.Entry(self)
        device_label = tk.Label(self, text="BACnet Device ID (0 - 4194302):")
        device_entry = tk.Entry(self)
        latitude_label.grid(row=1, column=0, sticky="w", pady=(10,0))
        latitude_entry.grid(row=1, column=1, sticky="w", pady=(10,0))
        device_label.grid(row=1, column=3, sticky="w", pady=(10,0))
        device_entry.grid(row=1, column=4, sticky="w", pady=(10,0))

        # Row 2 widgets
        longitude_label = tk.Label(self, text="Longitude (-180 <-> +180):")
        longitude_entry = tk.Entry(self)
        port_label = tk.Label(self, text="Port ID:")
        port_entry = tk.Entry(self)
        longitude_label.grid(row=2, column=0, sticky="w")
        longitude_entry.grid(row=2, column=1)
        port_label.grid(row=2, column=3, sticky="w")
        port_entry.grid(row=2, column=4, sticky="w")
        
        # Row 3 widgets
        altitude_label = tk.Label(self, text="Altitude (Metres:")
        altitude_entry = tk.Entry(self)
        altitude_label.grid(row=3, column=0, sticky="w")
        altitude_entry.grid(row=3, column=1, sticky="w")

        # Row 4 label
        api_heading_label = tk.Label(self, text= "WEATHER API SOURCES", font=("segoe", 12, "bold"))
        api_heading_label.grid(row=4, column=0, sticky="w", pady=(10,0))

        # Open weather widgets (R5)
        openweather_api_label = tk.Label(self, text="Open Weather API:", )
        openweather_api_checkbox = tk.Checkbutton(self)
        api_key_label = tk.Label(self, text="API Key:")
        api_key_entry = tk.Entry(self)
        openweather_api_label.grid(row=5, column=0, sticky="w", pady=(10,0))
        openweather_api_checkbox.grid(row=5, column=1, sticky="w", pady=(10,0))
        api_key_label.grid(row=5, column=2, sticky="w", pady=(10,0))
        api_key_entry.grid(row=5, column=3, sticky="w", pady=(10,0))

        # Row 6 widgets
        # api2_label = tk.Label(self, text="API Src 2:")
        # api2_checkbox = tk.Checkbutton(self)
        # api2_entry = tk.Entry(self)
        # api2_key_label = tk.Label(self, text="API Key:")
        # api2_label.grid(row=6, column=0, sticky="w")
        # api2_checkbox.grid(row=6, column=1, sticky="w")
        # api2_key_label.grid(row=6, column=2)
        # api2_entry.grid(row=6, column=3)

        # # Row 7 widgets
        # api3_label = tk.Label(self, text="API Src 3:")
        # api3_checkbox = tk.Checkbutton(self)
        # api3_entry = tk.Entry(self)
        # api3_key_label = tk.Label(self, text="API Key:")
        # api3_label.grid(row=7, column=0, sticky="w")
        # api3_checkbox.grid(row=7, column=1, sticky="w")
        # api3_key_label.grid(row=7, column=2)
        # api3_entry.grid(row=7, column=3)

        # Row 8 widgets (Start and Stop buttons)
        start_button = tk.Button(self, text="START", width=5, height=2, bg="green", command=(submit_form))
        stop_button = tk.Button(self, text="STOP", width=5, height=2, bg="red")
        start_button.grid(row=8, column=1, pady=(60,0))
        stop_button.grid(row=8, column=3, pady=(60,0))

class Page2(Page):
    def __init__(self, *args, **kwargs):
        Page.__init__(self, *args, **kwargs)
        templabel = tk.Label(self, text="Temperature", font=("segoe", 10, "bold"))
        templabel.grid(row=0, column=0, columnspan=4, pady=(10, 0), sticky="w")

        # Create labels for the rows
        row_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(row_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=0, sticky="w", pady=(10, 0))

            # Create an Entry widget for each temperature value
            entry = tk.Entry(self, width=10)
            entry.insert(0, "0.00")  # Initialize with 0
            entry.grid(row=i + 1, column=1, padx=10, pady=(10, 0), sticky="w")


        # Create labels for humidity
        humidity_label = tk.Label(self, text="Humidity", font=("segoe", 10, "bold"))
        humidity_label.grid(row=0, column=2, pady=(10, 0), padx=10)

        # Create labels for the rows (humidity)
        humrow_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(humrow_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=2, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.insert(0, "0.00")  # Initialize with 0
            entry.grid(row=i + 1, column=3, padx=10, pady=(10, 0))

        # create labels for rows (dew point)
        dewpt_label = tk.Label(self, text="Dew Point", font=("segoe", 10, "bold"))
        dewpt_label.grid(row=0, column=4, pady=(10, 0), padx=10)

        dewpt_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(dewpt_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=4, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.insert(0, "0.00")  # Initialize with 0
            entry.grid(row=i + 1, column=5, padx=10, pady=(10, 0))

        # create labels for rows (dew point)
        enth_label = tk.Label(self, text="Enthalpy", font=("segoe", 10, "bold"))
        enth_label.grid(row=0, column=6, pady=(10, 0), padx=10)

        enth_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(enth_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=6, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.insert(0, "0.00")  # Initialize with 0
            entry.grid(row=i + 1, column=7, padx=10, pady=(10, 0))


class Page3(Page):
    def __init__(self, *args, **kwargs):
        Page.__init__(self, *args, **kwargs)
        templabel = tk.Label(self, text="Temperature", font=("segoe", 10, "bold"))
        templabel.grid(row=0, column=0, columnspan=4, pady=(10, 0), sticky="w")

        # Create labels for the rows
        row_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(row_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=0, sticky="w", pady=(10, 0))

            # Create an Entry widget for each temperature value
            entry = tk.Entry(self, width=10)
            entry.grid(row=i + 1, column=1, padx=10, pady=(10, 0), sticky="w")

        # Create labels for humidity
        humidity_label = tk.Label(self, text="Humidity", font=("segoe", 10, "bold"))
        humidity_label.grid(row=0, column=2, pady=(10, 0), padx=10)

        # Create labels for the rows (humidity)
        humrow_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(humrow_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=2, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.grid(row=i + 1, column=3, padx=10, pady=(10, 0))

        # create labels for rows (dew point)
        dewpt_label = tk.Label(self, text="Dew Point", font=("segoe", 10, "bold"))
        dewpt_label.grid(row=0, column=4, pady=(10, 0), padx=10)

        dewpt_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(dewpt_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=4, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.grid(row=i + 1, column=5, padx=10, pady=(10, 0))

        # create labels for rows (dew point)
        enth_label = tk.Label(self, text="Enthalpy", font=("segoe", 10, "bold"))
        enth_label.grid(row=0, column=6, pady=(10, 0), padx=10)

        enth_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(enth_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=6, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.grid(row=i + 1, column=7, padx=10, pady=(10, 0))


class Page4(Page):
    def __init__(self, *args, **kwargs):
        Page.__init__(self, *args, **kwargs)
        templabel = tk.Label(self, text="Temperature", font=("segoe", 10, "bold"))
        templabel.grid(row=0, column=0, columnspan=4, pady=(10, 0), sticky="w")

        # Create labels for the rows
        row_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(row_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=0, sticky="w", pady=(10, 0))

            # Create an Entry widget for each temperature value
            entry = tk.Entry(self, width=10)
            entry.grid(row=i + 1, column=1, padx=10, pady=(10, 0), sticky="w")

        # Create labels for humidity
        humidity_label = tk.Label(self, text="Humidity", font=("segoe", 10, "bold"))
        humidity_label.grid(row=0, column=2, pady=(10, 0), padx=10)

        # Create labels for the rows (humidity)
        humrow_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(humrow_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=2, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.grid(row=i + 1, column=3, padx=10, pady=(10, 0))

        # create labels for rows (dew point)
        dewpt_label = tk.Label(self, text="Dew Point", font=("segoe", 10, "bold"))
        dewpt_label.grid(row=0, column=4, pady=(10, 0), padx=10)

        dewpt_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(dewpt_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=4, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.grid(row=i + 1, column=5, padx=10, pady=(10, 0))

        # create labels for rows (dew point)
        enth_label = tk.Label(self, text="Enthalpy", font=("segoe", 10, "bold"))
        enth_label.grid(row=0, column=6, pady=(10, 0), padx=10)

        enth_labels = ["Current:", "Max:", "Average:"] + [f"+{i*3} hours:" for i in range(1, 9)]

        for i, row_label in enumerate(enth_labels):
            row_label_widget = tk.Label(self, text=row_label)
            row_label_widget.grid(row=i + 1, column=6, sticky="w", pady=(10, 0), padx=10)

            # Create an Entry widget for each humidity value
            entry = tk.Entry(self, width=10)
            entry.grid(row=i + 1, column=7, padx=10, pady=(10, 0))

class MainView(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        p1 = Page1(self)
        p2 = Page2(self)
        p3 = Page3(self)
        p4 = Page4(self)


        buttonframe = tk.Frame(self)
        container = tk.Frame(self)
        buttonframe.pack(side="top", fill="x", expand=False)
        container.pack(side="top", fill="both", expand=True)

        p1.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p2.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p3.place(in_=container, x=0, y=0, relwidth=1, relheight=1)
        p4.place(in_=container, x=0, y=0, relwidth=1, relheight=1)

        def show_page(page, button):
            # Show the selected page
            page.show()

            # Highlight the active button (change color)
            for btn in [b1, b2, b3, b4]:
                btn.configure(bg='lightblue')  # Reset other buttons
            button.configure(bg='orange')  # Set active button color

            # Change Page 1 color to blue when another page is opened
            if page != p1:
                b1.configure(bg='lightblue')  # Set Page 1 color to blue


        b1 = tk.Button(buttonframe, text="Configuration", command=lambda: show_page(p1, b1), bg='orange')
        b2 = tk.Button(buttonframe, text="Source 1: Open Weather", command=lambda: show_page(p2, b2), bg='lightblue')
        b3 = tk.Button(buttonframe, text="Source 2: Placeholder", command=lambda: show_page(p3, b3), bg='lightblue')
        b4 = tk.Button(buttonframe, text="Source 3: Placeholder", command=lambda: show_page(p4, b4), bg='lightblue')


        b1.pack(side="left")
        b2.pack(side="left")
        b3.pack(side="left")
        b4.pack(side="left")

        p1.show()

        # Create the clock label
        global clock_label
        clock_label = tk.Label(self, font=("segoe", 10))
        clock_label.pack()

        # Start updating the time
        update_time()  
